#
# Copyright (C) 2024 by THE-VIP-BOY-OP@Github, < https://github.com/THE-VIP-BOY-OP >.
#
# This file is part of < https://github.com/THE-VIP-BOY-OP/VIP-MUSIC > project,
# and is released under the MIT License.
# Please see < https://github.com/THE-VIP-BOY-OP/VIP-MUSIC/blob/master/LICENSE >
#
# All rights reserved.
#
import re
from math import ceil
from typing import Union

from pyrogram import Client, filters, types
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message

import config
from config import BANNED_USERS, START_IMG_URL
from strings import get_command, get_string
from VIPMUSIC import HELPABLE, app
from VIPMUSIC.utils.database import get_lang, is_commanddelete_on
from VIPMUSIC.utils.decorators.language import LanguageStart
from VIPMUSIC.utils.inline.help import private_help_panel

### Command
HELP_COMMAND = get_command("HELP_COMMAND")

COLUMN_SIZE = 4  # number of  button height
NUM_COLUMNS = 3  # number of button width

donate = "https://graph.org/file/f172313e3a549e2ef685f.jpg"


class EqInlineKeyboardButton(InlineKeyboardButton):
    def __eq__(self, other):
        return self.text == other.text

    def __lt__(self, other):
        return self.text < other.text

    def __gt__(self, other):
        return self.text > other.text


def paginate_modules(page_n, module_dict, prefix, chat=None, close: bool = False):
    if not chat:
        modules = sorted(
            [
                EqInlineKeyboardButton(
                    x.__MODULE__,
                    callback_data="{}_module({},{})".format(
                        prefix, x.__MODULE__.lower(), page_n
                    ),
                )
                for x in module_dict.values()
            ]
        )
    else:
        modules = sorted(
            [
                EqInlineKeyboardButton(
                    x.__MODULE__,
                    callback_data="{}_module({},{},{})".format(
                        prefix, chat, x.__MODULE__.lower(), page_n
                    ),
                )
                for x in module_dict.values()
            ]
        )

    pairs = [modules[i : i + NUM_COLUMNS] for i in range(0, len(modules), NUM_COLUMNS)]

    max_num_pages = ceil(len(pairs) / COLUMN_SIZE) if len(pairs) > 0 else 1
    modulo_page = page_n % max_num_pages

    if len(pairs) > COLUMN_SIZE:
        pairs = pairs[modulo_page * COLUMN_SIZE : COLUMN_SIZE * (modulo_page + 1)] + [
            (
                EqInlineKeyboardButton(
                    "‚ùÆ",
                    callback_data="{}_prev({})".format(
                        prefix,
                        modulo_page - 1 if modulo_page > 0 else max_num_pages - 1,
                    ),
                ),
                EqInlineKeyboardButton(
                    "·¥Ñ ü·¥ès·¥á" if close else "B·¥Ä·¥Ñ·¥ã",
                    callback_data="close" if close else "feature",
                ),
                EqInlineKeyboardButton(
                    "‚ùØ",
                    callback_data="{}_next({})".format(prefix, modulo_page + 1),
                ),
            )
        ]
    else:
        pairs.append(
            [
                EqInlineKeyboardButton(
                    "·¥Ñ ü·¥ès·¥á" if close else "B·¥Ä·¥Ñ·¥ã",
                    callback_data="close" if close else "feature",
                ),
            ]
        )

    return pairs


@app.on_message(filters.command(HELP_COMMAND) & filters.private & ~BANNED_USERS)
@app.on_callback_query(filters.regex("settings_back_helper") & ~BANNED_USERS)
async def helper_private(
    client: app, update: Union[types.Message, types.CallbackQuery]
):
    is_callback = isinstance(update, types.CallbackQuery)
    if is_callback:
        try:
            await update.answer()
        except:
            pass

        chat_id = update.message.chat.id
        language = await get_lang(chat_id)
        _ = get_string(language)
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))

        await update.edit_message_text(_["help_1"], reply_markup=keyboard)
    else:
        chat_id = update.chat.id
        if await is_commanddelete_on(update.chat.id):
            try:
                await update.delete()
            except:
                pass
        language = await get_lang(chat_id)
        _ = get_string(language)
        keyboard = InlineKeyboardMarkup(
            paginate_modules(0, HELPABLE, "help", close=True)
        )
        if START_IMG_URL:

            await update.reply_photo(
                photo=START_IMG_URL,
                caption=_["help_1"],
                reply_markup=keyboard,
            )

        else:

            await update.reply_text(
                text=_["help_1"],
                reply_markup=keyboard,
            )


@app.on_message(filters.command(HELP_COMMAND) & filters.group & ~BANNED_USERS)
@LanguageStart
async def help_com_group(client, message: Message, _):
    keyboard = private_help_panel(_)
    await message.reply_text(_["help_2"], reply_markup=InlineKeyboardMarkup(keyboard))


async def help_parser(name, keyboard=None):
    if not keyboard:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))
    return keyboard


@app.on_callback_query(filters.regex(r"help_(.*?)"))
async def help_button(client, query):
    home_match = re.match(r"help_home\((.+?)\)", query.data)
    mod_match = re.match(r"help_module\((.+?),(.+?)\)", query.data)
    prev_match = re.match(r"help_prev\((.+?)\)", query.data)
    next_match = re.match(r"help_next\((.+?)\)", query.data)
    back_match = re.match(r"help_back\((\d+)\)", query.data)
    create_match = re.match(r"help_create", query.data)
    language = await get_lang(query.message.chat.id)
    _ = get_string(language)
    top_text = _["help_1"]

    if mod_match:
        module = mod_match.group(1)
        prev_page_num = int(mod_match.group(2))
        text = (
            f"<b><u>H·¥á Ä·¥á Is T ú·¥á H·¥á ü·¥ò F·¥è Ä {HELPABLE[module].__MODULE__}:</u></b>\n"
            + HELPABLE[module].__HELP__
        )

        key = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        text="ñ®† ô·¥Ä·¥Ñ·¥ãñ®†", callback_data=f"help_back({prev_page_num})"
                    ),
                    InlineKeyboardButton(text="ñ®†·¥Ñ ü·¥ès·¥áñ®†", callback_data="close"),
                ],
            ]
        )

        await query.message.edit(
            text=text,
            reply_markup=key,
            disable_web_page_preview=True,
        )

    elif home_match:
        await app.send_message(
            query.from_user.id,
            text=home_text_pm,
            reply_markup=InlineKeyboardMarkup(out),
        )
        await query.message.delete()

    elif prev_match:
        curr_page = int(prev_match.group(1))
        await query.message.edit(
            text=top_text,
            reply_markup=InlineKeyboardMarkup(
                paginate_modules(curr_page, HELPABLE, "help")
            ),
            disable_web_page_preview=True,
        )

    elif next_match:
        next_page = int(next_match.group(1))
        await query.message.edit(
            text=top_text,
            reply_markup=InlineKeyboardMarkup(
                paginate_modules(next_page, HELPABLE, "help")
            ),
            disable_web_page_preview=True,
        )

    elif back_match:
        prev_page_num = int(back_match.group(1))
        await query.message.edit(
            text=top_text,
            reply_markup=InlineKeyboardMarkup(
                paginate_modules(prev_page_num, HELPABLE, "help")
            ),
            disable_web_page_preview=True,
        )

    elif create_match:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))

        await query.message.edit(
            text=top_text,
            reply_markup=keyboard,
            disable_web_page_preview=True,
        )

    await client.answer_callback_query(query.id)


# ===================================

from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from config import BANNED_USERS
from strings import helpers
from VIPMUSIC import app
from VIPMUSIC.utils.decorators.language import languageCB


@app.on_callback_query(filters.regex("music_callback") & ~BANNED_USERS)
@languageCB
async def music_helper_cb(client, CallbackQuery, _):

    callback_data = CallbackQuery.data.strip()

    cb = callback_data.split(None, 1)[1]

    keyboard = back_to_music(_)

    if cb == "hb1":

        await CallbackQuery.edit_message_text(helpers.HELP_1, reply_markup=keyboard)

    elif cb == "hb2":

        await CallbackQuery.edit_message_text(helpers.HELP_2, reply_markup=keyboard)

    elif cb == "hb3":

        await CallbackQuery.edit_message_text(helpers.HELP_3, reply_markup=keyboard)

    elif cb == "hb4":

        await CallbackQuery.edit_message_text(helpers.HELP_4, reply_markup=keyboard)

    elif cb == "hb5":

        await CallbackQuery.edit_message_text(helpers.HELP_5, reply_markup=keyboard)

    elif cb == "hb6":

        await CallbackQuery.edit_message_text(helpers.HELP_6, reply_markup=keyboard)

    elif cb == "hb7":

        await CallbackQuery.edit_message_text(helpers.HELP_7, reply_markup=keyboard)

    elif cb == "hb8":

        await CallbackQuery.edit_message_text(helpers.HELP_8, reply_markup=keyboard)

    elif cb == "hb9":

        await CallbackQuery.edit_message_text(helpers.HELP_9, reply_markup=keyboard)

    elif cb == "hb10":

        await CallbackQuery.edit_message_text(helpers.HELP_10, reply_markup=keyboard)

    elif cb == "hb11":

        await CallbackQuery.edit_message_text(helpers.HELP_11, reply_markup=keyboard)

    elif cb == "hb12":

        await CallbackQuery.edit_message_text(helpers.HELP_12, reply_markup=keyboard)

    elif cb == "hb13":

        await CallbackQuery.edit_message_text(helpers.HELP_13, reply_markup=keyboard)

    elif cb == "hb14":

        await CallbackQuery.edit_message_text(helpers.HELP_14, reply_markup=keyboard)

    elif cb == "hb15":

        await CallbackQuery.edit_message_text(helpers.HELP_15, reply_markup=keyboard)


@app.on_callback_query(filters.regex("developer"))
async def about_callback(client: Client, callback_query: CallbackQuery):
    buttons = [
        [
            InlineKeyboardButton(text="·¥è·¥°…¥·¥á Ä", user_id=config.OWNER_ID[0]),
            InlineKeyboardButton(
                text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url=f"https://t.me/ur_support07"
            ),
        ],
        [
            InlineKeyboardButton(text="…¥·¥á·¥õ·¥°·¥è Ä·¥ã", url=f"t.me/RishuNetwork"),
            InlineKeyboardButton(text=" è·¥è·¥ú·¥õ·¥ú ô·¥á", url=f"https://t.me/Vip_robotz/4"),
        ],
        [
            InlineKeyboardButton(text="ñ®†Backñ®†", callback_data="about")
        ],  # Use a default label for the back button
    ]
    await callback_query.message.edit_text(
        "‚ú¶ **·¥õ ú…™s  ô·¥è·¥õ …™s ·¥ç·¥Ä·¥Ö·¥á  ô è ·¥Ä s·¥ã…™ ü ü·¥á·¥Ö ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä ·¥õ·¥è ·¥ç·¥Ä·¥ã·¥á  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥á·¥Äs è ·¥õ·¥è ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥Ä…¥·¥Ö ·¥ç·¥è Ä·¥á “ì·¥ú…¥.**\n\n‚ú¶ **·¥°…™·¥õ ú ·¥ä·¥ús·¥õ ·¥Ä “ì·¥á·¥° ·¥Ñ ü…™·¥Ñ·¥ãs,  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ñ·¥è…¥·¥õ Ä·¥è ü ·¥á·¥†·¥á Ä è·¥õ ú…™…¥…¢‚Äî ü…™·¥ã·¥á s·¥á·¥õ·¥õ…™…¥…¢ ·¥ú·¥ò ·¥è·¥°…¥·¥á Ä s·¥á·¥õ·¥õ…™…¥…¢s**\n\n‚ú¶ **·¥õ ú·¥á  ô·¥è·¥õ …™s ·¥Ö·¥ás…™…¢…¥·¥á·¥Ö ·¥õ·¥è  ú·¥á ü·¥ò  è·¥è·¥ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò s·¥ç·¥è·¥è·¥õ ú ü è ·¥Ä…¥·¥Ö ·¥á…¥·¥ä·¥è è ·¥ç·¥ús…™·¥Ñ ·¥õ·¥è·¥è. ·¥ä·¥ús·¥õ ·¥ús·¥á ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s  ô·¥á ü·¥è·¥° ·¥Ä…¥·¥Ö s·¥á·¥á  ú·¥è·¥° ·¥á·¥Äs è …™·¥õ …™s!**",
        reply_markup=InlineKeyboardMarkup(buttons),
    )


@app.on_callback_query(filters.regex("feature"))
async def feature_callback(client: Client, callback_query: CallbackQuery):
    keyboard = [
        [
            InlineKeyboardButton(
                text="‚öúÔ∏è ·¥ã…™·¥Ö…¥·¥Ä·¥ò ·¥ç·¥á …™…¥ …¥·¥á·¥° …¢ Ä·¥è·¥ú·¥ò",
                url=f"https://t.me/{app.username}?startgroup=true",
            ),
        ],
        [
            InlineKeyboardButton(text="üéß ·¥ç·¥ús…™·¥Ñ üéß", callback_data="music"),
            InlineKeyboardButton(text="‚ôªÔ∏è ·¥Ä ü ü ‚ôªÔ∏è", callback_data="settings_back_helper"),
        ],
        [InlineKeyboardButton(text="‚úØ  ú·¥è·¥ç·¥á ‚úØ", callback_data="go_to_start")],
    ]
    await callback_query.message.edit_text(
        f"**W·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è** {app.mention}\n\n**Ex·¥ò ü·¥è Ä·¥á ·¥Ä ·¥°…™·¥Ö·¥á  Ä·¥Ä…¥…¢·¥á ·¥è“ì “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás ·¥Ö·¥ás…™…¢…¥·¥á·¥Ö ·¥õ·¥è ·¥á…¥ ú·¥Ä…¥·¥Ñ·¥á  è·¥è·¥ú Ä ·¥ç·¥ús…™·¥Ñ ·¥áx·¥ò·¥á Ä…™·¥á…¥·¥Ñ·¥á. T·¥Ä·¥ò KIDNAP ME IN YOUR NEW GROUP OR CHANNEL ·¥õ·¥è …™…¥·¥†…™·¥õ·¥á ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è  è·¥è·¥ú Ä ·¥è·¥°…¥ …¢ Ä·¥è·¥ú·¥ò ·¥è Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä…¥·¥Ö ·¥á…¥…™·¥è è s·¥á·¥Ä·¥ç ü·¥áss ·¥ç·¥ús…™·¥Ñ …™…¥·¥õ·¥á…¢ Ä·¥Ä·¥õ…™·¥è…¥. Us·¥á ·¥õ ú·¥á MUSIC  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥Ä ü ü ·¥õ ú·¥á ·¥ç·¥ús…™·¥Ñ- Ä·¥á ü·¥Ä·¥õ·¥á·¥Ö “ì·¥ú…¥·¥Ñ·¥õ…™·¥è…¥·¥Ä ü…™·¥õ…™·¥ás, “ì Ä·¥è·¥ç s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢  è·¥è·¥ú Ä “ì·¥Ä·¥†·¥è Ä…™·¥õ·¥á s·¥è…¥…¢s ·¥õ·¥è ·¥Ñ Ä·¥á·¥Ä·¥õ…™…¥…¢ ·¥ò ü·¥Ä è ü…™s·¥õs. L·¥è·¥è·¥ã…™…¥…¢ “ì·¥è Ä ·¥ç·¥è Ä·¥á ·¥è·¥ò·¥õ…™·¥è…¥s? H…™·¥õ ·¥õ ú·¥á ALL  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è ·¥áx·¥ò ü·¥è Ä·¥á ·¥á·¥†·¥á Ä è·¥õ ú…™…¥…¢ ·¥õ ú…™s  ô·¥è·¥õ ·¥Ñ·¥Ä…¥ ·¥è“ì“ì·¥á Ä. W ú·¥á…¥·¥á·¥†·¥á Ä  è·¥è·¥ú' Ä·¥á  Ä·¥á·¥Ä·¥Ö è, s…™·¥ç·¥ò ü è ·¥õ·¥Ä·¥ò HOME ·¥õ·¥è  Ä·¥á·¥õ·¥ú Ä…¥ ·¥õ·¥è ·¥õ ú·¥á ·¥ç·¥Ä…™…¥ ·¥ç·¥á…¥·¥ú. E…¥…™·¥è è  è·¥è·¥ú Ä ·¥õ…™·¥ç·¥á ·¥°…™·¥õ ú JBL M·¥ús…™·¥Ñ B·¥è·¥õ!**",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


@app.on_callback_query(filters.regex("music"))
async def music_callback(client: Client, callback_query: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(text="A·¥Ö·¥ç…™…¥", callback_data="music_callback hb1"),
                InlineKeyboardButton(text="A·¥ú·¥õ ú", callback_data="music_callback hb2"),
                InlineKeyboardButton(
                    text="B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ", callback_data="music_callback hb3"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="B ü-C ú·¥Ä·¥õ", callback_data="music_callback hb4"
                ),
                InlineKeyboardButton(
                    text="B ü-Us·¥á Ä", callback_data="music_callback hb5"
                ),
                InlineKeyboardButton(text="C-P ü·¥Ä è", callback_data="music_callback hb6"),
            ],
            [
                InlineKeyboardButton(text="G-B·¥Ä…¥", callback_data="music_callback hb7"),
                InlineKeyboardButton(text="L·¥è·¥è·¥ò", callback_data="music_callback hb8"),
                InlineKeyboardButton(
                    text="M·¥Ä…™…¥·¥õ·¥á…¥·¥Ä…¥·¥Ñ·¥á", callback_data="music_callback hb9"
                ),
            ],
            [
                InlineKeyboardButton(text="P…™…¥…¢", callback_data="music_callback hb10"),
                InlineKeyboardButton(text="P ü·¥Ä è", callback_data="music_callback hb11"),
                InlineKeyboardButton(
                    text="S ú·¥ú“ì“ì ü·¥á", callback_data="music_callback hb12"
                ),
            ],
            [
                InlineKeyboardButton(text="S·¥á·¥á·¥ã", callback_data="music_callback hb13"),
                InlineKeyboardButton(text="S·¥è…¥…¢", callback_data="music_callback hb14"),
                InlineKeyboardButton(text="S·¥ò·¥á·¥á·¥Ö", callback_data="music_callback hb15"),
            ],
            [InlineKeyboardButton(text="‚úØ  ô·¥Ä·¥Ñ·¥ã ‚úØ", callback_data=f"feature")],
        ]
    )

    await callback_query.message.edit(
        f"**C ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s  ô·¥á ü·¥è·¥° “ì·¥è Ä ·¥ç·¥è Ä·¥á …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥.  I“ì  è·¥è·¥ú' Ä·¥á “ì·¥Ä·¥Ñ…™…¥…¢ ·¥Ä…¥ è ·¥ò Ä·¥è ô ü·¥á·¥ç  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Äs·¥ã …™…¥ [s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.](t.me/tg_friendsss)**\n\n**A ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ñ·¥Ä…¥  ô·¥á ·¥ús·¥á·¥Ö ·¥°…™·¥õ ú: /**",
        reply_markup=keyboard,
    )


@app.on_callback_query(filters.regex("back_to_music"))
async def feature_callback(client: Client, callback_query: CallbackQuery):
    keyboard = [
        [
            InlineKeyboardButton(
                text="‚öúÔ∏è ·¥ã…™·¥Ö…¥·¥Ä·¥ò ·¥ç·¥á …™…¥ …¥·¥á·¥° …¢ Ä·¥è·¥ú·¥ò ·¥è Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü ‚öúÔ∏è",
                url=f"https://t.me/{app.username}?startgroup=true",
            ),
        ],
        [
            InlineKeyboardButton(text="üéß ·¥ç·¥ús…™·¥Ñ üéß", callback_data="music"),
            InlineKeyboardButton(text="‚ôªÔ∏è ·¥Ä ü ü ‚ôªÔ∏è", callback_data="settings_back_helper"),
        ],
        [InlineKeyboardButton(text="‚úØ  ú·¥è·¥ç·¥á ‚úØ", callback_data="go_to_start")],
    ]
    await callback_query.message.edit_text(
        f"**W·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è** {app.mention}\n\n**Ex·¥ò ü·¥è Ä·¥á ·¥Ä ·¥°…™·¥Ö·¥á  Ä·¥Ä…¥…¢·¥á ·¥è“ì “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás ·¥Ö·¥ás…™…¢…¥·¥á·¥Ö ·¥õ·¥è ·¥á…¥ ú·¥Ä…¥·¥Ñ·¥á  è·¥è·¥ú Ä ·¥ç·¥ús…™·¥Ñ ·¥áx·¥ò·¥á Ä…™·¥á…¥·¥Ñ·¥á. T·¥Ä·¥ò KIDNAP ME IN YOUR NEW GROUP OR CHANNEL ·¥õ·¥è …™…¥·¥†…™·¥õ·¥á ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è  è·¥è·¥ú Ä ·¥è·¥°…¥ …¢ Ä·¥è·¥ú·¥ò ·¥è Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä…¥·¥Ö ·¥á…¥…™·¥è è s·¥á·¥Ä·¥ç ü·¥áss ·¥ç·¥ús…™·¥Ñ …™…¥·¥õ·¥á…¢ Ä·¥Ä·¥õ…™·¥è…¥. Us·¥á ·¥õ ú·¥á MUSIC  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥Ä ü ü ·¥õ ú·¥á ·¥ç·¥ús…™·¥Ñ- Ä·¥á ü·¥Ä·¥õ·¥á·¥Ö “ì·¥ú…¥·¥Ñ·¥õ…™·¥è…¥·¥Ä ü…™·¥õ…™·¥ás, “ì Ä·¥è·¥ç s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢  è·¥è·¥ú Ä “ì·¥Ä·¥†·¥è Ä…™·¥õ·¥á s·¥è…¥…¢s ·¥õ·¥è ·¥Ñ Ä·¥á·¥Ä·¥õ…™…¥…¢ ·¥ò ü·¥Ä è ü…™s·¥õs. L·¥è·¥è·¥ã…™…¥…¢ “ì·¥è Ä ·¥ç·¥è Ä·¥á ·¥è·¥ò·¥õ…™·¥è…¥s? H…™·¥õ ·¥õ ú·¥á ALL  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è ·¥áx·¥ò ü·¥è Ä·¥á ·¥á·¥†·¥á Ä è·¥õ ú…™…¥…¢ ·¥õ ú…™s  ô·¥è·¥õ ·¥Ñ·¥Ä…¥ ·¥è“ì“ì·¥á Ä. W ú·¥á…¥·¥á·¥†·¥á Ä  è·¥è·¥ú' Ä·¥á  Ä·¥á·¥Ä·¥Ö è, s…™·¥ç·¥ò ü è ·¥õ·¥Ä·¥ò HOME ·¥õ·¥è  Ä·¥á·¥õ·¥ú Ä…¥ ·¥õ·¥è ·¥õ ú·¥á ·¥ç·¥Ä…™…¥ ·¥ç·¥á…¥·¥ú. E…¥…™·¥è è  è·¥è·¥ú Ä ·¥õ…™·¥ç·¥á ·¥°…™·¥õ ú JBL M·¥ús…™·¥Ñ B·¥è·¥õ!**",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


def back_to_music(_):
    upl = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    text=_["BACK_BUTTON"],
                    callback_data=f"music",
                ),
            ]
        ]
    )
    return upl


@app.on_callback_query(filters.regex("about"))
async def about_callback(client: Client, callback_query: CallbackQuery):
    buttons = [
        [
            InlineKeyboardButton(text="‚ú®·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä‚ú®", callback_data="developer"),
            InlineKeyboardButton(text="‚ö°“ì·¥á·¥Ä·¥õ·¥ú Ä·¥á‚ö°", callback_data="feature"),
        ],
        [
            InlineKeyboardButton(text="üìì ô·¥Äs…™·¥Ñ …¢·¥ú…™·¥Ö·¥áüìì", callback_data="basic_guide"),
            InlineKeyboardButton(text="‚öúÔ∏è·¥Ö·¥è…¥·¥Ä·¥õ·¥á‚öúÔ∏è", callback_data="donate"),
        ],
        [InlineKeyboardButton(text="üîô Back", callback_data="go_to_start")],
    ]
    await callback_query.message.edit_text(
        f"** ú…™ …™ ·¥Ä·¥ç {app.mention} ‚ú®**\n\n**·¥Ä ·¥ò·¥è·¥°·¥á Ä“ì·¥ú ü ·¥Ä…¥·¥Ö ·¥Ä·¥°·¥ás·¥è·¥ç·¥á ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ ·¥Ä…¥·¥Ö ·¥ç·¥ús…™·¥Ñ ·¥ò ü·¥Ä è·¥á Ä ·¥õ ú·¥Ä·¥õ …¢…™·¥†·¥ás  è·¥è·¥ú s·¥ò·¥Ä·¥ç-“ì Ä·¥á·¥á ·¥Ä…¥·¥Ö “ì·¥ú…¥ ·¥á…¥·¥†…™ Ä·¥è…¥·¥ç·¥á…¥·¥õ “ì·¥è Ä  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥òs :)**\n\n**‚óè …™ ·¥Ñ·¥Ä…¥  Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ ·¥ús·¥á Äs.**\n**‚óè …™ ·¥Ñ·¥Ä…¥ …¢ Ä·¥á·¥á·¥õ ·¥ús·¥á Äs ·¥°…™·¥õ ú ·¥Ñ·¥ús·¥õ·¥è·¥ç…™·¥¢·¥Ä ô ü·¥á ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥ás ·¥Ä…¥·¥Ö ·¥á·¥†·¥á…¥ s·¥á·¥õ ·¥Ä …¢ Ä·¥è·¥ú·¥ò's  Ä·¥ú ü·¥ás.**\n**‚óè …™  ú·¥Ä·¥†·¥á ·¥Ä ·¥ç·¥ús…™·¥Ñ ·¥ò ü·¥Ä è·¥á Ä s ès·¥õ·¥á·¥ç.**\n**‚óè …™  ú·¥Ä·¥†·¥á ·¥Ä ü·¥ç·¥ès·¥õ ·¥Ä ü ü ·¥Ä·¥°·¥Ä…™·¥õ·¥á·¥Ö …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä…¥·¥Ä…¢…™…¥…¢ “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás  ü…™·¥ã·¥á  ô·¥Ä…¥, ·¥ç·¥ú·¥õ·¥á, ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á, ·¥ã…™·¥Ñ·¥ã, “ì·¥á·¥Ö·¥á Ä·¥Ä·¥õ…™·¥è…¥, ·¥Ä…¥·¥Ö ·¥ç·¥Ä…¥ è ·¥ç·¥è Ä·¥á.**\n**‚óè …™  ú·¥Ä·¥†·¥á ·¥Ä …¥·¥è·¥õ·¥á-·¥ã·¥á·¥á·¥ò…™…¥…¢ s ès·¥õ·¥á·¥ç,  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õs, ·¥Ä…¥·¥Ö ·¥á·¥†·¥á…¥ ·¥ò Ä·¥á·¥Ö·¥á·¥õ·¥á Ä·¥ç…™…¥·¥á·¥Ö  Ä·¥á·¥ò ü…™·¥ás ·¥è…¥ ·¥Ñ·¥á Ä·¥õ·¥Ä…™…¥ ·¥ã·¥á è·¥°·¥è Ä·¥Ös.**\n**‚óè …™ ·¥Ñ ú·¥á·¥Ñ·¥ã “ì·¥è Ä ·¥Ä·¥Ö·¥ç…™…¥s' ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s  ô·¥á“ì·¥è Ä·¥á ·¥áx·¥á·¥Ñ·¥ú·¥õ…™…¥…¢ ·¥Ä…¥ è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ä…¥·¥Ö ·¥ç·¥è Ä·¥á s·¥õ·¥ú“ì“ì.**\n\n**‚ûª ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è …¢·¥á·¥õ ·¥ç·¥è Ä·¥á ·¥Ä ô·¥è·¥ú·¥õ  ô·¥è·¥õ ü¶ö.**",
        reply_markup=InlineKeyboardMarkup(buttons),
    )


# If the back button has different meanings in various panels, you can set different callbacks
@app.on_callback_query(filters.regex("support"))
async def back_button_callback(client: Client, callback_query: CallbackQuery):
    keyboard = [
        [
            InlineKeyboardButton(text="üé≠·¥è·¥°…¥·¥á Äüé≠", user_id=config.OWNER_ID[0]),
            InlineKeyboardButton(
                text="üå±…¢…™·¥õ ú·¥ú ôüå±",
                url="https://github.com/THE-VIP-BOY-OP",
            ),
        ],
        [
            InlineKeyboardButton(text="‚õÖ…¢ Ä·¥è·¥ú·¥ò‚õÖ", url=f"{config.SUPPORT_GROUP}"),
            InlineKeyboardButton(text="üéÑ·¥Ñ ú·¥Ä…¥…¥·¥á üüéÑ", url=f"{config.SUPPORT_CHANNEL}"),
        ],
        [InlineKeyboardButton(text="‚úØ  ú·¥è·¥ç·¥á ‚úØ", callback_data="go_to_start")],
    ]

    await callback_query.message.edit_text(
        "**‡πè ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è …¢·¥á·¥õ ·¥ç·¥è Ä·¥á ·¥Ä ô·¥è·¥ú·¥õ ·¥ç·¥á**\n\n**…™“ì  è·¥è·¥ú “ì…™…¥·¥Ö ·¥Ä…¥ è ·¥á Ä Ä·¥è Ä ·¥è Ä  ô·¥ú…¢ ·¥è…¥  ô·¥è·¥õ ·¥è Ä ·¥°·¥Ä…¥·¥õ ·¥õ·¥è …¢…™·¥†·¥á ·¥Ä…¥ è “ì·¥á·¥á·¥Ö ô·¥Ä·¥Ñ·¥ã ·¥Ä ô·¥è·¥ú·¥õ ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ ú·¥á…¥  è·¥è·¥ú ·¥Ä Ä·¥á ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ  (‚úø‚ó†‚Äø‚ó†)**",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


@app.on_callback_query(filters.regex("donate"))
async def settings_back_callback(client: Client, callback_query: CallbackQuery):
    close = [[InlineKeyboardButton(text="‚úØ ·¥Ñ ü·¥ès·¥á ‚úØ", callback_data="close")]]
    await callback_query.message.reply_photo(
        photo=donate,
        caption=f"**s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥ç è ·¥Ñ·¥è·¥Ö…™…¥…¢ ·¥ä·¥è·¥ú Ä…¥·¥á è  ô è ·¥Ö·¥è…¥·¥Ä·¥õ…™…¥…¢ ·¥Ö…™ Ä·¥á·¥Ñ·¥õ ü è ·¥õ·¥è  ú·¥á ü·¥ò ·¥á…¥ ú·¥Ä…¥·¥Ñ·¥á ·¥ç è  ô·¥è·¥õ's “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás ·¥Ä…¥·¥Ö ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥ç·¥á…¥·¥õ.**\n\n** è·¥è·¥ú Ä ·¥Ñ·¥è…¥·¥õ Ä…™ ô·¥ú·¥õ…™·¥è…¥ ·¥°…™ ü ü ·¥Ö…™ Ä·¥á·¥Ñ·¥õ ü è “ì·¥ú…¥·¥Ö ·¥õ ú·¥á ·¥Ñ Ä·¥á·¥Ä·¥õ…™·¥è…¥ ·¥è“ì …™…¥…¥·¥è·¥†·¥Ä·¥õ…™·¥†·¥á, ·¥ús·¥á Ä-“ì Ä…™·¥á…¥·¥Ö ü è ·¥õ·¥è·¥è üs ·¥Ä…¥·¥Ö ·¥áx·¥Ñ…™·¥õ…™…¥…¢  ô·¥è·¥õ ·¥Ñ·¥Ä·¥ò·¥Ä ô…™ ü…™·¥õ…™·¥ás.**\n\n**s…™·¥ç·¥ò ü è s·¥Ñ·¥Ä…¥ ·¥õ ú·¥á ·¥Ñ·¥è·¥Ö·¥á ·¥Ä…¥·¥Ö ·¥ç·¥Ä·¥ã·¥á ·¥Ä ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ‚Äî…¥·¥è  ú·¥Äss ü·¥á, ·¥ä·¥ús·¥õ ·¥Ä «´·¥ú…™·¥Ñ·¥ã ·¥°·¥Ä è ·¥õ·¥è s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥Ä…¥·¥Ö  ú·¥á ü·¥ò  ô Ä…™…¥…¢ …¥·¥á·¥° “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás ·¥õ·¥è  ü…™“ì·¥á.**\n\n**·¥á·¥†·¥á Ä è ·¥Ö·¥è…¥·¥Ä·¥õ…™·¥è…¥,  ô…™…¢ ·¥è Ä s·¥ç·¥Ä ü ü, …¢·¥è·¥ás ·¥Ä  ü·¥è…¥…¢ ·¥°·¥Ä è …™…¥ ·¥ò·¥ús ú…™…¥…¢ ·¥õ ú…™s ·¥ò Ä·¥è·¥ä·¥á·¥Ñ·¥õ “ì·¥è Ä·¥°·¥Ä Ä·¥Ö. ·¥õ ú·¥Ä…¥·¥ã  è·¥è·¥ú “ì·¥è Ä  ô·¥á…™…¥…¢ ·¥Ä ·¥ò·¥Ä Ä·¥õ ·¥è“ì ·¥õ ú…™s ·¥áx·¥Ñ…™·¥õ…™…¥…¢ ·¥ä·¥è·¥ú Ä…¥·¥á è!**",
        reply_markup=InlineKeyboardMarkup(close),
    )


@app.on_callback_query(filters.regex("basic_guide"))
async def settings_back_callback(client: Client, callback_query: CallbackQuery):
    keyboard = [[InlineKeyboardButton(text="‚úØ  ô·¥Ä·¥Ñ·¥ã ‚úØ", callback_data="about")]]
    guide_text = f"** ú·¥á è! ·¥õ ú…™s …™s ·¥Ä «´·¥ú…™·¥Ñ·¥ã ·¥Ä…¥·¥Ö s…™·¥ç·¥ò ü·¥á …¢·¥ú…™·¥Ö·¥á ·¥õ·¥è ·¥ús…™…¥…¢** {app.mention} **üéâ**\n\n**1. ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á '·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ñ ü·¥Ä…¥'  ô·¥ú·¥õ·¥õ·¥è…¥.**\n**2. s·¥á ü·¥á·¥Ñ·¥õ  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò …¥·¥Ä·¥ç·¥á.**\n**3. …¢ Ä·¥Ä…¥·¥õ ·¥õ ú·¥á  ô·¥è·¥õ ·¥Ä ü ü …¥·¥á·¥Ñ·¥áss·¥Ä Ä è ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s “ì·¥è Ä s·¥ç·¥è·¥è·¥õ ú ·¥Ä…¥·¥Ö “ì·¥ú ü ü “ì·¥ú…¥·¥Ñ·¥õ…™·¥è…¥·¥Ä ü…™·¥õ è.**\n\n**·¥õ·¥è ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös,  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ñ ú·¥è·¥ès·¥á  ô·¥á·¥õ·¥°·¥á·¥á…¥ ·¥ç·¥ús…™·¥Ñ ·¥è Ä ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ ·¥ò Ä·¥á“ì·¥á Ä·¥á…¥·¥Ñ·¥ás.**\n**…™“ì  è·¥è·¥ú s·¥õ…™ ü ü “ì·¥Ä·¥Ñ·¥á ·¥Ä…¥ è …™ss·¥ú·¥ás, “ì·¥á·¥á ü “ì Ä·¥á·¥á ·¥õ·¥è  Ä·¥á·¥Ä·¥Ñ ú ·¥è·¥ú·¥õ “ì·¥è Ä s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚ú®**"
    await callback_query.message.edit_text(
        text=guide_text, reply_markup=InlineKeyboardMarkup(keyboard)
    )
